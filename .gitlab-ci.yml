stages: [lint, deploy]

default:
  tags: ["main"]

variables:
  KUBECONFIG: "$CI_PROJECT_DIR/.kube/config"

.helm_base:
  image: alpine/helm:3.14.4
  before_script:
    - apk add --no-cache kubectl ca-certificates
    - test -n "$KUBECONFIG_B64" || (echo "KUBECONFIG_B64 is empty" && exit 2)
    - mkdir -p "$(dirname "$KUBECONFIG")"
    - echo "$KUBECONFIG_B64" | base64 -d > "$KUBECONFIG"
    - chmod 600 "$KUBECONFIG"
    - kubectl version --client=true
    # только права в dev, никаких cluster-wide команд
    - kubectl -n dev auth can-i get pods || (echo "no RBAC to read pods in dev" && exit 3)

smoke_kube:
  stage: lint
  extends: .helm_base
  script:
    - echo "KUBECONFIG=$KUBECONFIG"
    - kubectl -n dev get pods
    - kubectl -n dev get svc
  rules: [ { if: '$CI_COMMIT_BRANCH' } ]

helm_lint:
  stage: lint
  extends: .helm_base
  script: [ "helm lint charts/myapp" ]
  rules: [ { if: '$CI_COMMIT_BRANCH' } ]

helm_deploy_dev:
  stage: deploy
  extends: .helm_base
  variables:
    HELM_RELEASE: ${HELM_RELEASE:-myapp}
    HELM_NAMESPACE: ${HELM_NAMESPACE:-dev}
    IMAGE_REPO: ${IMAGE_REPO:-192.168.0.10:5050/root/app}
    IMAGE_TAG: ${IMAGE_TAG:-latest}
  script:
    # НЕ трогаем namespaces (нет прав на cluster-scope)
    - >
      helm upgrade --install "$HELM_RELEASE" charts/myapp
      --namespace "$HELM_NAMESPACE"
      --set-string image.repository="$IMAGE_REPO"
      --set-string image.tag="$IMAGE_TAG"
      --atomic --wait --timeout 5m
  rules: [ { if: '$CI_COMMIT_BRANCH == "main"' } ]
